package edu.technopolis.advanced.boatswain;

import java.io.IOException;
import java.util.Objects;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import edu.technopolis.advanced.boatswain.request.GetSubscriptionsRequest;
import edu.technopolis.advanced.boatswain.request.SubscribePayload;
import edu.technopolis.advanced.boatswain.request.SubscribeRequest;
import edu.technopolis.advanced.boatswain.response.GetSubscriptionsResponse;
import edu.technopolis.advanced.boatswain.response.SubscribeResponse;
import edu.technopolis.advanced.boatswain.response.Subscription;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class BoatswainBot {
    private static final Logger log = LoggerFactory.getLogger(BoatswainBot.class);

    public static void main(String[] args) {
        Properties props = new Properties();
        log.info("Reading application properties...");
        try {
            props.load(BoatswainBot.class.getResourceAsStream("/application.properties"));
        } catch (IOException e) {
            log.error("Failed to read application properties. Terminating application...");
            System.exit(1);
        }
        OkApiClient client = null;
        try {
            client = createClient(props);
            GetSubscriptionsResponse response = client.get(
                    new GetSubscriptionsRequest(props.getProperty("ok.api.endpoint.subscriptions")), GetSubscriptionsResponse.class);
            String botEndpoint = props.getProperty("bot.message.endpoint");
            log.info("Checking that bot is subscribed to messages...");
            if (checkSubscribed(botEndpoint, response)) {
                log.info("Subscription exists");
            } else {
                log.info("Subscription does not exist. Making a subscription...");
                subscribe(client, props, botEndpoint);
                log.info("Subscription is ok");
            }
            log.info("Creating endpoint...");
            createServer(client, props);
        } catch (Exception e) {
            log.error("Failed to create api client", e);
            closeClient(client);
            System.exit(1);
        }
    }

    private static void closeClient(OkApiClient client) {
        if (client != null) {
            try {
                client.close();
            } catch (IOException ce) {
                log.error("Failed to close client", ce);
            }
        }
    }

    private static void subscribe(OkApiClient client, Properties props, String botEndpoint) throws IOException {
        SubscribeRequest req = new SubscribeRequest(props.getProperty("ok.api.endpoint.subscribe"),
                new SubscribePayload(botEndpoint));
        SubscribeResponse post = client.post(req, SubscribeResponse.class);
        if (!post.isSuccess()) {
            throw new IllegalStateException("Failed to subscribe bot to messages");
        }
    }

    private static boolean checkSubscribed(String botEndpoint, GetSubscriptionsResponse subscriptionsResponse) {
        if (subscriptionsResponse.getSubscriptions() == null || subscriptionsResponse.getSubscriptions().isEmpty()) {
            return false;
        }

        for (Subscription subscription : subscriptionsResponse.getSubscriptions()) {
            if (Objects.equals(subscription.getUrl(), botEndpoint)) {
                return true;
            }
        }
        return false;
    }

    private static OkApiClient createClient(Properties props) throws IOException {
        int port = Integer.parseInt(props.getProperty("ok.api.port", "443"));
        String host = props.getProperty("ok.api.host");
        String tokenParamName = props.getProperty("ok.api.param.token");
        String token = props.getProperty("ok.api.access_token");
        return new OkApiClient(host, tokenParamName + '=' + token);
    }

    private static void createServer(OkApiClient client, Properties props) {
        try {
            BotServer botServer = new BotServer(props.getProperty("bot.message.local.endpoint"));
            Runtime
                    .getRuntime()
                    .addShutdownHook(new Thread(() -> {
                        closeClient(client);
                        botServer.stop();
                    }));
            botServer.start();
        } catch (IOException e) {
            log.error("Failed to initialize http server on port 80", e);
        }
    }

}
